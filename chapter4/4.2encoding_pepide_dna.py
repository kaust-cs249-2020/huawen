RNA_codon={}
with open('RNA_codon_table_1.txt', 'r') as f1:
    for ip in f1.readlines():
        if ip != None:
            ip=ip.replace(" ",",")
            ip=ip.replace("\n","")
            ip=ip.split(",")
            for i in range(len(ip)):
                RNA_codon[ip[0]]=ip[1]

def codon_finder(peptide,RNA_codon):
    '''for given peptide and RNA codons
    return the coding codon of each aa in peptide
    '''
    coding_rna={}
    for codon,value in RNA_codon.items():
        for aa in peptide:
            if aa==value:
                if aa not in coding_rna.keys():
                    coding_rna[aa]=[codon]
                else:
                    coding_rna[aa].append(codon)
    return coding_rna


def joint_two_codon(item1,item2):
    '''item1 and item2 are tuples of the aa and its' codon,
    this function is to generate all of the possible mrna of item1 and item2
    '''
    connect_aa=item1[0]+item2[0]
    connect_codon_seq=[]
    for i in item1[1]:
        for j in item2[1]:
            connect_codon_seq.append(i+j)
    return (connect_aa,connect_codon_seq)

def mrna_of_peptide(dict):
    '''for a given peptide,dict is a dictionary of each aa's codon'''
    items=list(dict.items())
    mrna=items[0]
    for i in range(1,len(items)):
        mrna=joint_two_codon(mrna,items[i])
    return mrna

def reverse_complementary_rna(rna):
    '''get the reverse and complementary sequences of mrna'''
    rna=rna[::-1]
    rna_reverse=[]
    for i in range(len(rna)):
        if rna[i]=="A":
            rna_reverse.append("U")
        elif rna[i]=="U":
            rna_reverse.append("A")
        elif rna[i]=="C":
            rna_reverse.append("G")
        elif rna[i]=="G":
            rna_reverse.append("C")
    return ''.join(rna_reverse)

def translate_rna_aa(rna):
    '''translate the rna into an amino acid string Peptide'''
    aa=[]
    first_codon=rna[0:3]
    aa.append(RNA_codon[first_codon])
    i=3
    while i<=(len(rna)-3):
        codon=rna[i:i+3]
        aa.append(RNA_codon[codon])
        i=i+3
    else:
        return ''.join(aa)

def encoding_pepide_dna(dna,pepide):
    '''for the given peptide and dna,
    find the sequence in the dna that encode peptide
    '''
    target_dna=[]
    #codon=codon_finder(pepide,RNA_codon)
    #mrna_seq=mrna_of_peptide(codon)[1]
    possible_peptide={} #this is dict to record every dna string and its coding peptide
    k=len(pepide)
    for i in range(len(dna)-3*k+1):
        dna_string=dna[i:i+k*3]
        mrna1=dna_string.replace("T","U")
        mrna2=reverse_complementary_rna(mrna1)
        peptide1=translate_rna_aa(mrna1)
        peptide2=translate_rna_aa(mrna2)
        possible_peptide[dna_string]=[peptide1,peptide2]
        #print(dna_string)
        #print([peptide1,peptide2])
        if pepide in possible_peptide[dna_string]:
            target_dna.append(dna_string)
    return target_dna

dna='GTCCCACATCGTTCAGTGACAACCGAAGCGAAGCATAGCCATTCCTCGGGGACTAAAGCCGTCGTCAACTCCTTAGGCGCGCCCACCGGCATCTAACTATTGGCTAAGCACGGAAGAGGTATGTCGTTGTGAGCAGCTCACACTCTGGTTCCCTTTAAAAGCTTAAGCCACCTGCGTTATCTAAGCCGTCATAAGCTCCCCTTAGGTCGATGAGTCGGGGAAAAACTCTTATCAGATCGGCTGTATGCAATACGGAGAAGGTATACGGACCGTTCCGAGGTGACATAAGTATTATCCCTGGCGAGAATTTCAGCGCATATACACCTCCAAAGTACTGCTGTTGCTGTTCGGCTTGCCTTCTCGCTGAAAGCCCTCTTCTTCGCCGTGGCGCCGACAAGCAATGGCACACCCGGAAATGAGGAGTAATCTGCTGGTCTCCTGCAACTCGAAACGGTTAGCAAACGTCCACTATTTTCGTATTGATCCGGCACACCACGTTATCTCGCTGCCACACAAACTTGCTGGAGCGTTGTCTCTCGTGGCGGGTGTAACTCCACGGAGAGGGCTGATTCTGTTTTTAACGCAAGTTCTGGCCCGGCGAAGTGGTATAAACGGAAGGATGACCTTCAGGCTAACCCAGGCTTCCCGACGGTGCTCGGCCAAATTTCATTTACGCCTCGATGATTAAAGGGCTACCTGGAATTGGGCACTGCTTCTGAGCGGTCTATATGATTAGGAGATTGAAGGAGGCCCAACAAAGATATCTGTATGGCAAGCTTCATCTCTCTCCATGTGTCTGGTCTGCCCAACACGACCATTAACCAGAGTGGGCCTATCTGGATACATTGGAAGTCCTTACCCACAGAGGAGAGGTACCACTGCCATGCGCATGCCATTGAAACTGTGACATGGCAAATATAGAAAACTTAGGTCTGAGTACAGACTAAGGGACAGCATAGGTGGTACAACATTCATGCTCACACCAAGCTTCCTGCTCAAGAATTCTATTCAAATCCGTAGGGCCGTCCGTAAGCCCTTGAGAGTAAGGAGAAATGAGTACTGGGCTAGAAGACCAGAATCGTGCGTGGTCTGCTGGCCATTTAGTCCCACGCATTTCACTTACTAACGGCACGACTTCGGACAAGGCTGTGAGTCGGTAACTCTTTAAGCCATCATGAACAGACAGTGCCGTTACGGCCGCCTTAACACCCGTTTTCGGAGTCAAATGTCCAAGCAGCGGTCTTCTGGGTCCTCGTGCTCAGTACTGACTGGTAGATACAAATAGCCTCCCAGGCCCCATACGCAAGCTGAAAGACGAGTCTCTACCAGCGCTGTTATGATCGGGGATACGAACATGATGGTCCCTTAAAACTAGCCTTTACGGCAGCCGTAAAAGTTTGTTATCGGCTATATAGTTCCCAGTTATTGATTAATCGTCTACTATACGCTTATCATTCTCCGGATCATCGTTGTCAGAGCCACTGGAACTGGGACATAGCGAACGTGGAGTACCCTGATACGACATCCGTGCGCGTCATGTAGATCGCCCGGAAGATCAACATGGTGCTGTGCCAGCTGAGGGTAAAGTCAGGCGCGGGCATGCGAATCCTAGGCTAAACTTACGTTATAAAGGATCTTCAGTTCTTCATAGAAAAGGTTAGTACCCGGGACCGAACGTACGATTAGGGGTTTCTCCGTCTCTCAGCGAGGTCCATTGGAATTGCGACATCGCAAAGACAGCCGCGGGAGTCCATATTGAAGATCCTGGCCGGGTTAGAGACGGGATAAGATGGAAACTGAGTACACTCGGCGCGGCGATAAAACATTTTCGTACCAGACTTGGCGTTTATTCAATGTTCTGACTTCCCAAACCCACCACTCTCAACCTCAAATACCTGGGGTTAGTGTATAGAATTAGTATCAATGCCTAGGTAGTCCAGACAGAGTCCCGCAAACCCAGCTGGACGTCGCCTCACAGAGCCGTAGACCCGCCGCGCGTCCTCGTACCTCCATCGGTGCAGTCCTACTCTATACTTGCCTTGGGATCGGCGTTTAAGTGTTACGATGACGAACACGATAGATCACGCATGTGATTATGTATAAGCCTCCAGGCGAGCCGAGAACGGAGCACCGCAGTCGTCCAATCTGAAGGGATAGAGATAGGTGTATTAACCTAAATCGATGGTATCGAGCGATTATCGTAAAACTTCCACCGGCGAAGTTTGGAGACCCACCGTTGTTGCTGGGCGGTTGCACCGTACAGTATTAATGGAGCTTTCAAAGATTGTATCCATCGAATTCACCTATCGGGCGGCTCGCATCCCGTCTTGTGTTCCCATATCTCTAGAAAAGTTGGTCTACCACTGGAATTGGCTCATCGCAAAAATTGTACACTCGAGGGTATCATCATCAGACAATCATGGGTGCTTGGGTGGGGTACATCATCCACGGAGATGAAGGGGTAGTGAATATTTAGCCAGATAGACTCGATCGACAGGGGGCGTGAGAAGTTCCTCATAAACCGCTATAAAGGACAAGGGTTTGCGCCACCTGTCGGTGGCAACCAAGACCTCTTCCGGTGTACTGCATATCCCTCACAGTGACCGCTCCCGATGCTGGCCGTCAGATTCTCTGTTTAACGCCTGTCGTTCGTGGACCCTGGCCACGCACTTATATCCCACCGGCCCTCCATTGAAACTGCGACATTGCAAATGAATACCCACCGTTGCGCATGTGCGCCTCCTATATGTAATCTTACTCCCAAATAGCTTTAAATGCTACATGCAAGAAGGGGGGGAAGTCTCCGGCCTTCTCATAACGGAGTCTTTCCGGGTAAACGCAAGCTGAAACACTAGTTCACGTGTTGCACGCGACCACCTGCGTGAACGTCATCATAGATATATACGACAGGGACGGCAAACCCCATACCCGCCGTCTAGTCCGACTTCGTACCGTTGCTACAAGCCTCCCCCCATGACATGCTCTTTGCCTTGGGAGGGGCGCTTGCATGATTCTGTTTTGCTATGAGCCAGTTCCAATGGTAGGCGTCTGAACTCACCGACCTAATTCCGATGTGTCACGTAGAGTATAGGATTTGGTCACGCGTAAGTTCGCCTTGAACTTGACCGAGGGCAAACTTATAGCGTCCTCGCTTACGTCTGGGAAAGGGTGAAGGGCAGAATTGGTAGCTCCGTCTCACTCGGAATGCGATACGACTTTGGGGGTATAATCTTTGATCTACTGGAGGTGGGGAGTAGATCCGTGAGCCTTGTGCCTCCGTTCGTACCTGTACTTCCATACGATAACCGGATAGACTTATCATAAATAGCGTGCCGGAGCCTTCCGGTCTTTCTCTGCCGTATGGGTATCTTCAGGGCGCCACATGGCAATAGCGGTCTCTTTTTCCAAACTCGTGATAAAGTGCACCAACCGAAGACTTGCATCCATATCGTAAATGCTACATTTGATCCCAGTTCTGAAGGAGGAAATAAGGGCAGTTAAATGTCACTGTCCTTCAGATACGAATGGTCCCCAGCTGCACGTGGGTTCAGTTAGAAAATTGATCTTTTCCGTGACGTTTGCCCTCTTCCGTTTATCAGCAGAAATCCGCAAAGATGTAACGGCTGCGGGAACTTCACCGCGAAGATTGCCGATCTGGAGCTTCCCCTCACGTACGTAAAAATGTTAGCGTGGAGAGGGGCCAACGGCCGTCTCGTTACAGAACAACTAAAAACTCTCACGATCTCTGTTCCTAGTCCCTATGGGAGCGGTACATCCCCTATATGCCGGGCTTAGAGGATATCATTCTACAATCGAATTGGCTTCCGAACTCTAAGGGGTATCCAAGATCTACACCCAGTATGTTGTGCAGTTGTGAATATCGAATGCCGTTCGTCGGGATCTCACAGTGACATGACGATCGCGTAATGTTATACGTTCAAACGTAATTACACGCTGATAAGATTACGGATCACATAGCGAATGAGTGCAACCTACCTGCGAGGGGGTTTACTGCTGGGGAGTGCTCGATGTCGTAGGCACTGCGCTGTAGGGGGGAACGATCGTGTTGGATCGGCCTGACATCGTCGTTAGAGTAATTTGCTATGAGTCAGTTTCAATGGCTCCCGCTGTAGATACACTTAAACCTTCGCGATTCTTAGCGACAAAGCGCGCTCATGGCACAGGTTTTGTCTGTTCTCGCAAGACCACAACGCTAGTAGAGTTGCGGGAACGGCTGGTTAACTCCAATCGTAGTGGAACTTTCCGACTTCCTAAGTTCTATCTAACCGTAACTTAATATATGTTCATTAAAGTACGGTCCCCGGCATTACGCAAGATCTTTGAAACATCGGGTTTAGGGCGTAGTGGGATACAAGTGGTAGTACGAGCAGAGCTAGTTGCCCGTGCCCCGGCCTTAAGTAGATCTTCAGTCCACTGGAACTGCGACATCGCAAAACGGACTACACGTCCTTAGCTTGGAAGAGTACTGGCATTTGTAACCCCATCGTCGGACCCGACTTAGTTCTATAACGGTCTTTCGTAAGCTGTGGCCTGAGTCCTAGTCTGGTGGGGCAACACTCTCGCTATACTGGGGACGTGGGCATTATAACAGCTGAGACCAAGGATTATCCTTCGCTATGAGTCAATTCCAGTGGACTGTGTCTTTTTGACTTCCTTAAGCGTGACTATGAGATTAGAGTTAGCGCTAGTCGCGGTCCCTGTGATTCGAGCCAACCAACCAAGTTATTCGCGCACAGGGCATCGACGCTCCGAGTGACCACTGAAATTGCGACATAGCAAACGTGCCGATTAAGCGACCCCAGTCACACGACGGGGCTAGATGACGATACGAAGCACTTGCCACGGCTGCCCTCGGCATCTCCTACGCCCCACATACTATAATCCTTAATTCAGGGATGCCGGGCCTTAGACGATTCAAGTCTCCGACAAGTCCATCTAAAACAGCGCGTTAAATATGGATCTTCAGCCCACCCCGCCATCCTTCGCTAGTAGAAAGATGACTACCCACTCCGCTACTGATTATCTACTAATAATGTTTCCCAGGCCACCATGGGAGAGCTCACGAAAGAGATGACACGAGGATAACAAACGTAGGCCCTGACAGCCGTAAGGGAAGGACTGTTCCCGACGGGCTCTACCTCCACAGGGCCTTGCAACAGTTGCCTATGGCGCTCTCTGCAATAAATATGTCAGAGCAGCTTTAACTGGTATAGCGATTCAAGGTTGGAGTGTACTCGAGATTGGCTCCTCACTTCAAGCCCAAGAGGGGTTTAACTCCGTCAGCCACTTCTCTGTGCTGTATTTAGTGTCCACGAATTCTATGCCTCCGTCCATTGGAACTGGCTCATCGCAAAGTATTCTGGTCAGGTTATGTGGTAAACGATTAGAGCAAAAGTGTCTGCGTCATTACTAACATCTTCCCAATCAGATGGGGTTGCCAATGACCTGAGATCCACAATCTGCGGAATAGTACGAATGACGCCCTTTCTTCATTATTCACAGGGTTTGTAACGTTGTCGACCTTGGGCTCGCAAAGAAGGGACTTGGCATCCATAGCCGTTTACCATTGAAATTGGCTCATCGCGAAATTGCAGTGCGGCGGCTCTGTGTGTTGGTGTTATGAGGTCCCCGCCGGGCGACCTGCTTGAAACAAGCTACACCAATCTTCGAGAGGTTCGCCATGTCGCAGTTTCAATGGCAGAGTTCTTAAAAAAACGAATACACGTGTTATATTGCATAGTACCCACTGAAACTGGGACATGGCGAAGCGCTGTTCGACAGAGGCTACGCAAATGGTTTTAAGTTTCTTAAGTGAATTATTTTGGCTCCAGCCGCCGTCCAGACTACAGAACTGCGTAGGGACTAACCTCGGTCTGGTTGCATTTCAGCAATAGGGCCCTGGGGGTGTAATGGTGTTTTTTGCCACGAAGCCTGGACCATTGAATCGCCATTGATGTCACTGGACTCAGGGCGCGGCTTGTGTTCTCGGGGAGGGCACGATTGTTTACAACCTGCCCCCGTGAAGCATCACACGATCCCATCATACAAAAGTTATTCGGACCAAGGATAGATCCCCTCTATGTACATCGTCCAATTAAGTCATTTCGACTTAGGTACAAGAGCCGCAGCCCGACATGATGCGCACTGCCCACATCCTGGTACTATATCCGCGTCACCAGAGATGTTTGTAGGACGGTGGACCGTCACCGCACGTTCAAGGGGGTGGGTCAGTTTGCGATGTCGCAGTTCCAGTGGTTACAATCCTCCCATGTGGTTTCTGCAATGCCTTGGGAAGAGGGAGACTAATGCAGTTGGTGTGTGCTTTGTTTATTGCACAGCTTAAAGAGCTGCTAAAATTAGTTGCAGGTATGGCACCAGAGGCTAGATGGTTAGGCAACGCGAGTTACCCCGTGCTCACCTATTGCGTGTTTAATATTCGCCATGTCTCAATTTCAATGGTACTAATCAATCGAGCTGAAGGGGATGTAGTGAAAGGATCACGAATGCTTGCTCAAAGTCCCGTCTGAGACTTGGCCCGGGTCAAACGAACCACCTATTCGGAACTTTCTTCTTAAAGTCGGATGTATTTTAGTGAACTATGTCTGTAATGGACCGTTCGTCCTCACACACGCCAAGTTTTGCCTTTCATAACATCGGGCTACAAATTGGTAGCATCTCGCCATCTAGATGAGAAAATCGACGCACGTGGAAACGCTAAAACAGTTTCGCCCGGTCTAACGTCACTTACTTGTCAAGGCAATTGTGGAGTGACCCCCGTGCACCTGTTCCACCGGCGCACCGATTTGTCCGTCAGGTCTTCTCATGGCTCCTTAGAGTTCCATTATTTCTTGTCTGGTTTGATTGCCGGTCTCTAAAAAATGTAACAGGTGTGTACCAGTAGGCGAAACTGCTTGCGGCGTAGAGACAGAAAGTGCCTGGGGCCGCACTTAATGCGTTGACTCGCCATCGGACCGGAAATAATATGTACATAGGGTATTGTGACGCTGCGATCGTTGACCCCCCAACCACGCATAGGCTCCTAGCTTCTTGATCTTATGTTAGAACCTTCGAAATTTGCCTGGGATTTCTCGCCACAGGGAATGGTGAGGCAATTAAAGACTCGTCGATCCACTGTGTCATGACTCGAGTTGGATTGTATTATCCAAACGCCGACGAAAAACGCAAAAGGATCTCACGACTAGTTTGCCGAGGTCACCGACACTATTTGCGATGTCTCAATTTCAATGGAACGGAGCCGCCGTCTAATTTACATCCTAGTTTGACAAGTTAGATCCATTGAAATTGACTCATTGCGAACACGGGGACCCAAGGACGTATATCCGGGATTAGTGACGTGACTTTCATTTATTCATTTATCGAATGCAAAAACTACGATATTGTAAACAGAACTTCTCAGTTGGGAGGATAATTCTTTGTTGGGATGCATTGAAGCGCCCGCGACTACACATAAGTGGCCGTGTTTCAGCCCTTCCCTGCGTTGCACCGTTACGTTATACCGGTTGTACAAACTGGCATGTAACATTAGATCCGAGGGAAAAAAGAATGGCCCTATCTCCATTGGAATTGGCTCATTGCAAACGCGCACCAAGTTTCCCATTGCAACGGACTGTCGCACAAGAAGAATAGGTTTCATCGCCGGACTAGCCATAGTGAGCCTCACCCAAACCACAAGGAAGACTGCTTGACGGCCTTTGGCATTCCGACTACGCTCAATAAAAACTGCTCTTGCACCACTGGTTATTCTCAGCTCGTACCAGGACCGTGGCCACGGGCACGTGCCTTGGCAAAAATGGTCTGGCCCGAGGATTAATCTGCACTTCGTTGGGACAGTCTCAGGAGAGGAGAATGAGGAGATATTGATACGCGATGCGGTATGTACGTGATTCGTCGTGCCGTGCGGACTCGCAGCTCCCAATGGTTAGTATCTTAAAGGATAAGGTTACACTTTCCCATGCGCGGGGGTATGGAAAATCTGCGTCGTGGTAGGCGCTTGGGCTGTTATTTCATTCGAGGACAGGTGCACCTCATGATCTAGGACTTACCTTCGTGTATGGCGCTTTTGCGATGTCCCAATTTCAGTGGGCACTATATTGTCGCGCGCCCAGGGTGCAGGTTACAAGAGCCTGGAGTTAATAGTAGAGGGCGCTTTTGCATGAAATTGTAACACCTCGACATATTAATCTATGTGTGGGCCGTACCTTATTTCCGGCGTGCTGTTGGGCCGTGCTTTTAAATTACCTCACGAGGTGCGCTCCCGGAGTCCCCTCGGGAACGTTTCCCGCTAGCCATCTGAAGATTTAGATCATAAAACGTGAGGTTAGCCGGTCTGTATCGCTT'
a=encoding_pepide_dna(dna,"FAMSQFQW")
for i in a:
    print(i)

##below is transfer the peptide into target mrna, transfer the dna string into mrnas 
# and compare the target mrna and each mrnas, it takes a much longer time!!!!! don't do this
'''
def encoding_pepide_dna(dna,pepide):
    #for the given peptide and dna,
    #find the sequence in the dna that encode peptide
    
    target_dna=[]
    codon=codon_finder(pepide,RNA_codon)
    mrna_seq=mrna_of_peptide(codon)[1]
    possible_mrna={} #this is dict to record every dna string and its coding mrna
    k=len(pepide)
    for i in range(len(dna)-3*k+1):
        dna_string=dna[i:i+k*3]
        mrna1=dna_string.replace("T","U")
        mrna2=reverse_complementary_rna(mrna1)
        possible_mrna[dna_string]=[mrna1,mrna2]
        for j in range(len(mrna_seq)):
            if mrna_seq[j] in possible_mrna[dna_string]:
                target_dna.append(dna_string)
    return target_dna
'''